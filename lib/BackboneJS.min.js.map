{"version":3,"sources":["src/AJAX.js","src/Events.js","src/Utils/wrapError.js","src/Utils/urlError.js","src/Utils/Extend.js","src/Model.js","src/Collection.js","src/View.js","src/utils/urlError.js","src/Sync.js","src/Router.js","src/History.js","src/BackboneJS.js"],"names":["ajax","$","apply","arguments","_listening","Events","eventSplitter","eventsApi","iteratee","events","name","callback","opts","names","i","_typeof","context","_","keys","length","test","split","on","_events","onApi","this","listeners","_listeners","id","interop","listenTo","obj","_listenId","uniqueId","listeningTo","_listeningTo","listening","Listening","error","tryCatchOn","options","handlers","ctx","count","push","e","off","offApi","stopListening","ids","isEmpty","remaining","j","handler","_callback","cleanup","once","onceMap","bind","listenToOnce","map","offer","trigger","Math","max","args","Array","triggerApi","objEvents","allEvents","all","slice","triggerEvents","concat","ev","l","a1","a2","a3","call","listener","prototype","unbind","wrapError","model","resp","urlError","Error","extend","protoProps","staticProps","child","parent","has","constructor","create","__super__","Model","attributes","attrs","preinitialize","cid","cidPrefix","collection","parse","defaults","result","set","changed","initialize","clone","Backbone","sync","attr","escape","get","key","val","_typeof$1","_validate","unset","silent","changes","changing","_changing","_previousAttributes","current","prev","isEqual","idAttribute","_pending","diff","hasChanged","old","success","serverAttrs","validate","wait","method","isNew","patch","xhr","destroy","defer","base","replace","encodeURIComponent","validationError","Collection","models","comparator","_reset","reset","setOptions","add","remove","merge","addOptions","splice","array","insert","at","min","tail","toJSON","singular","isArray","removed","_removeModels","added","merged","_isModel","toAdd","toMerge","toRemove","modelMap","sort","sortable","sortAttr","isString","existing","_prepareModel","_addReference","orderChanged","some","m","index","_removeReference","previousModels","_byId","modelId","first","where","isFunction","sortBy","callbackOpts","save","CollectionIterator","ITERATOR_VALUES","ITERATOR_KEYS","ITERATOR_KEYSVALUES","indexOf","_onModelEvent","event","prevId","previousAttributes","$$iterator","Symbol","iterator","values","kind","_collection","_kind","_index","next","value","done","View","pick","viewOptions","_ensureElement","delegateEventSplitter","selector","$el","find","_removeElement","element","undelegateEvents","_setElement","delegateEvents","el","match","delegate","eventName","tagName","document","createElement","setElement","className","_createElement","_setAttributes","methodMap","type","emulateHTTP","emulateJSON","params","dataType","url","data","contentType","JSON","stringify","_method","beforeSend","setRequestHeader","processData","textStatus","errorThrown","Router","routes","_bindRoutes","optionalParam","namedParam","splatParam","escapeRegExp","route","isRegExp","_routeToRegExp","router","history","fragment","_extractParameters","execute","navigate","pop","optional","RegExp","exec","param","decodeURIComponent","History","checkUrl","window","location","routeStripper","rootStripper","pathStripper","started","path","pathname","root","getSearch","decodeFragment","rootPath","decodeURI","href","charAt","_usePushState","_wantsHashChange","getPath","getHash","hashChange","_hasHashChange","documentMode","_useHashChange","_wantsPushState","pushState","_hasPushState","getFragment","atRoot","iframe","src","style","display","tabIndex","body","iWindow","insertBefore","firstChild","contentWindow","open","close","hash","addEventListener","attachEvent","_checkUrlInterval","setInterval","interval","loadUrl","removeEventListener","detachEvent","removeChild","clearInterval","unshift","matchRoot","decodedFragment","title","assign","_updateHash","VERSION","version","addMethod","attribute","cb","defaultVal","addUnderscoreMethods","Class","methods","each","instance","isObject","modelMatcher","matcher","matches","collectionMethods","forEach","collect","reduce","inject","reduceRight","foldr","detect","filter","reject","every","any","include","includes","invoke","toArray","size","take","initial","rest","drop","last","difference","shuffle","lastIndexOf","chain","sample","partition","groupBy","countBy","indexBy","findIndex","findLastIndex","modelMethods","pairs","invert","config","Base","mixin","mappings","functions","memo"],"mappings":"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","file":"BackboneJS.min.js","sourcesContent":["//\n//\n//\n\nimport $ from 'jQuery';\n\n// Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n// Override this if you'd like to use a different library.\nfunction ajax() {\n  return $.ajax.apply($, arguments);\n}\n\nexport default ajax;\n","// Backbone.Events\n// ---------------\n\nimport _ from 'underscore';\n\n// A module that can be mixed in to *any object* in order to provide it with\n// a custom event channel. You may bind a callback to an event with `on` or\n// remove with `off`; `trigger`-ing an event fires all callbacks in\n// succession.\n//\n//     var object = {};\n//     _.extend(object, Backbone.Events);\n//     object.on('expand', function(){ alert('expanded'); });\n//     object.trigger('expand');\n//\nvar Events = {};\n\n// Regular expression used to split event strings.\nvar eventSplitter = /\\s+/;\n\n// A private global variable to share between listeners and listenees.\nvar _listening;\n\n// Iterates over the standard `event, callback` (as well as the fancy multiple\n// space-separated events `\"change blur\", callback` and jQuery-style event\n// maps `{event: callback}`).\nvar eventsApi = function(iteratee, events, name, callback, opts) {\n  var i = 0, names;\n  if (name && typeof name === 'object') {\n    // Handle event maps.\n    if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;\n    for (names = _.keys(name); i < names.length ; i++) {\n      events = eventsApi(iteratee, events, names[i], name[names[i]], opts);\n    }\n  } else if (name && eventSplitter.test(name)) {\n    // Handle space-separated event names by delegating them individually.\n    for (names = name.split(eventSplitter); i < names.length; i++) {\n      events = iteratee(events, names[i], callback, opts);\n    }\n  } else {\n    // Finally, standard events.\n    events = iteratee(events, name, callback, opts);\n  }\n  return events;\n};\n\n// Bind an event to a `callback` function. Passing `\"all\"` will bind\n// the callback to all events fired.\nEvents.on = function(name, callback, context) {\n  this._events = eventsApi(onApi, this._events || {}, name, callback, {\n    context: context,\n    ctx: this,\n    listening: _listening\n  });\n\n  if (_listening) {\n    var listeners = this._listeners || (this._listeners = {});\n    listeners[_listening.id] = _listening;\n    // Allow the listening to use a counter, instead of tracking\n    // callbacks for library interop\n    _listening.interop = false;\n  }\n\n  return this;\n};\n\n// Inversion-of-control versions of `on`. Tell *this* object to listen to\n// an event in another object... keeping track of what it's listening to\n// for easier unbinding later.\nEvents.listenTo = function(obj, name, callback) {\n  if (!obj) return this;\n  var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n  var listeningTo = this._listeningTo || (this._listeningTo = {});\n  var listening = _listening = listeningTo[id];\n\n  // This object is not listening to any other events on `obj` yet.\n  // Setup the necessary references to track the listening callbacks.\n  if (!listening) {\n    this._listenId || (this._listenId = _.uniqueId('l'));\n    listening = _listening = listeningTo[id] = new Listening(this, obj);\n  }\n\n  // Bind callbacks on obj.\n  var error = tryCatchOn(obj, name, callback, this);\n  _listening = void 0;\n\n  if (error) throw error;\n  // If the target obj is not Backbone.Events, track events manually.\n  if (listening.interop) listening.on(name, callback);\n\n  return this;\n};\n\n// The reducing API that adds a callback to the `events` object.\nvar onApi = function(events, name, callback, options) {\n  if (callback) {\n    var handlers = events[name] || (events[name] = []);\n    var context = options.context, ctx = options.ctx, listening = options.listening;\n    if (listening) listening.count++;\n\n    handlers.push({callback: callback, context: context, ctx: context || ctx, listening: listening});\n  }\n  return events;\n};\n\n// An try-catch guarded #on function, to prevent poisoning the global\n// `_listening` variable.\nvar tryCatchOn = function(obj, name, callback, context) {\n  try {\n    obj.on(name, callback, context);\n  } catch (e) {\n    return e;\n  }\n};\n\n// Remove one or many callbacks. If `context` is null, removes all\n// callbacks with that function. If `callback` is null, removes all\n// callbacks for the event. If `name` is null, removes all bound\n// callbacks for all events.\nEvents.off = function(name, callback, context) {\n  if (!this._events) return this;\n  this._events = eventsApi(offApi, this._events, name, callback, {\n    context: context,\n    listeners: this._listeners\n  });\n\n  return this;\n};\n\n// Tell this object to stop listening to either specific events ... or\n// to every object it's currently listening to.\nEvents.stopListening = function(obj, name, callback) {\n  var listeningTo = this._listeningTo;\n  if (!listeningTo) return this;\n\n  var ids = obj ? [obj._listenId] : _.keys(listeningTo);\n  for (var i = 0; i < ids.length; i++) {\n    var listening = listeningTo[ids[i]];\n\n    // If listening doesn't exist, this object is not currently\n    // listening to obj. Break out early.\n    if (!listening) break;\n\n    listening.obj.off(name, callback, this);\n    if (listening.interop) listening.off(name, callback);\n  }\n  if (_.isEmpty(listeningTo)) this._listeningTo = void 0;\n\n  return this;\n};\n\n// The reducing API that removes a callback from the `events` object.\nvar offApi = function(events, name, callback, options) {\n  if (!events) return;\n\n  var context = options.context, listeners = options.listeners;\n  var i = 0, names;\n\n  // Delete all event listeners and \"drop\" events.\n  if (!name && !context && !callback) {\n    for (names = _.keys(listeners); i < names.length; i++) {\n      listeners[names[i]].cleanup();\n    }\n    return;\n  }\n\n  names = name ? [name] : _.keys(events);\n  for (; i < names.length; i++) {\n    name = names[i];\n    var handlers = events[name];\n\n    // Bail out if there are no events stored.\n    if (!handlers) break;\n\n    // Find any remaining events.\n    var remaining = [];\n    for (var j = 0; j < handlers.length; j++) {\n      var handler = handlers[j];\n      if (\n        callback && callback !== handler.callback &&\n          callback !== handler.callback._callback ||\n            context && context !== handler.context\n      ) {\n        remaining.push(handler);\n      } else {\n        var listening = handler.listening;\n        if (listening) listening.off(name, callback);\n      }\n    }\n\n    // Replace events if there are any remaining.  Otherwise, clean up.\n    if (remaining.length) {\n      events[name] = remaining;\n    } else {\n      delete events[name];\n    }\n  }\n\n  return events;\n};\n\n// Bind an event to only be triggered a single time. After the first time\n// the callback is invoked, its listener will be removed. If multiple events\n// are passed in using the space-separated syntax, the handler will fire\n// once for each event, not once for a combination of all events.\nEvents.once = function(name, callback, context) {\n  // Map the event into a `{event: once}` object.\n  var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));\n  if (typeof name === 'string' && context == null) callback = void 0;\n  return this.on(events, callback, context);\n};\n\n// Inversion-of-control versions of `once`.\nEvents.listenToOnce = function(obj, name, callback) {\n  // Map the event into a `{event: once}` object.\n  var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));\n  return this.listenTo(obj, events);\n};\n\n// Reduces the event callbacks into a map of `{event: onceWrapper}`.\n// `offer` unbinds the `onceWrapper` after it has been called.\nvar onceMap = function(map, name, callback, offer) {\n  if (callback) {\n    var once = map[name] = _.once(function() {\n      offer(name, once);\n      callback.apply(this, arguments);\n    });\n    once._callback = callback;\n  }\n  return map;\n};\n\n// Trigger one or many events, firing all bound callbacks. Callbacks are\n// passed the same arguments as `trigger` is, apart from the event name\n// (unless you're listening on `\"all\"`, which will cause your callback to\n// receive the true name of the event as the first argument).\nEvents.trigger = function(name) {\n  if (!this._events) return this;\n\n  var length = Math.max(0, arguments.length - 1);\n  var args = Array(length);\n  for (var i = 0; i < length; i++) args[i] = arguments[i + 1];\n\n  eventsApi(triggerApi, this._events, name, void 0, args);\n  return this;\n};\n\n// Handles triggering the appropriate event callbacks.\nvar triggerApi = function(objEvents, name, callback, args) {\n  if (objEvents) {\n    var events = objEvents[name];\n    var allEvents = objEvents.all;\n    if (events && allEvents) allEvents = allEvents.slice();\n    if (events) triggerEvents(events, args);\n    if (allEvents) triggerEvents(allEvents, [name].concat(args));\n  }\n  return objEvents;\n};\n\n// A difficult-to-believe, but optimized internal dispatch function for\n// triggering events. Tries to keep the usual cases speedy (most internal\n// Backbone events have 3 arguments).\nvar triggerEvents = function(events, args) {\n  var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n  switch (args.length) {\n    case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;\n    case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;\n    case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;\n    case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;\n    default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;\n  }\n};\n\n// A listening class that tracks and cleans up memory bindings\n// when all callbacks have been offed.\nvar Listening = function(listener, obj) {\n  this.id = listener._listenId;\n  this.listener = listener;\n  this.obj = obj;\n  this.interop = true;\n  this.count = 0;\n  this._events = void 0;\n};\n\nListening.prototype.on = Events.on;\n\n// Offs a callback (or several).\n// Uses an optimized counter if the listenee uses Backbone.Events.\n// Otherwise, falls back to manual tracking to support events\n// library interop.\nListening.prototype.off = function(name, callback) {\n  var cleanup;\n  if (this.interop) {\n    this._events = eventsApi(offApi, this._events, name, callback, {\n      context: void 0,\n      listeners: void 0\n    });\n    cleanup = !this._events;\n  } else {\n    this.count--;\n    cleanup = this.count === 0;\n  }\n  if (cleanup) this.cleanup();\n};\n\n// Cleans up memory bindings between the listener and the listenee.\nListening.prototype.cleanup = function() {\n  delete this.listener._listeningTo[this.obj._listenId];\n  if (!this.interop) delete this.obj._listeners[this.id];\n};\n\n// Aliases for backwards compatibility.\nEvents.bind   = Events.on;\nEvents.unbind = Events.off;\n\n// Export Public API\nexport default Events;\n","// Wrap an optional error callback with a fallback error event.\nvar wrapError = function(model, options) {\n  var error = options.error;\n  options.error = function(resp) {\n    if (error) error.call(options.context, model, resp, options);\n    model.trigger('error', model, resp, options);\n  };\n};\n\nexport default wrapError;\n","//\n//  urlError\n//\n\n// Throw an error when a URL is needed, and none is supplied.\n\nvar urlError = function() {\n  throw new Error('A \"url\" property or function must be specified');\n};\n\nexport default urlError;\n","// Helpers\n// -------\n\nimport _ from 'underscore';\n\n// Helper function to correctly set up the prototype chain for subclasses.\n// Similar to `goog.inherits`, but uses a hash of prototype properties and\n// class properties to be extended.\nvar extend = function(protoProps, staticProps) {\n  var parent = this;\n  var child;\n\n  // The constructor function for the new subclass is either defined by you\n  // (the \"constructor\" property in your `extend` definition), or defaulted\n  // by us to simply call the parent constructor.\n  if (protoProps && _.has(protoProps, 'constructor')) {\n    child = protoProps.constructor;\n  } else {\n    child = function(){ return parent.apply(this, arguments); };\n  }\n\n  // Add static properties to the constructor function, if supplied.\n  _.extend(child, parent, staticProps);\n\n  // Set the prototype chain to inherit from `parent`, without calling\n  // `parent`'s constructor function and add the prototype properties.\n  child.prototype = _.create(parent.prototype, protoProps);\n  child.prototype.constructor = child;\n\n  // Set a convenience property in case the parent's prototype is needed\n  // later.\n  child.__super__ = parent.prototype;\n\n  return child;\n};\n\nexport default extend;\n","// Backbone.Model\n// --------------\n\nimport _ from 'underscore';\n\nimport Events from './Events';\nimport wrapError from './Utils/wrapError';\nimport urlError from './Utils/urlError';\nimport extend from './Utils/Extend';\n\n// Backbone **Models** are the basic data object in the framework --\n// frequently representing a row in a table in a database on your server.\n// A discrete chunk of data and a bunch of useful, related methods for\n// performing computations and transformations on that data.\n\n// Create a new model with the specified attributes. A client id (`cid`)\n// is automatically generated and assigned for you.\nvar Model = function(attributes, options) {\n  var attrs = attributes || {};\n  options || (options = {});\n  this.preinitialize.apply(this, arguments);\n  this.cid = _.uniqueId(this.cidPrefix);\n  this.attributes = {};\n  if (options.collection) this.collection = options.collection;\n  if (options.parse) attrs = this.parse(attrs, options) || {};\n  var defaults = _.result(this, 'defaults');\n  attrs = _.defaults(_.extend({}, defaults, attrs), defaults);\n  this.set(attrs, options);\n  this.changed = {};\n  this.initialize.apply(this, arguments);\n};\n\n// Attach all inheritable methods to the Model prototype.\n_.extend(Model.prototype, Events, {\n\n  // A hash of attributes whose current and previous value differ.\n  changed: null,\n\n  // The value returned during the last failed validation.\n  validationError: null,\n\n  // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n  // CouchDB users may want to set this to `\"_id\"`.\n  idAttribute: 'id',\n\n  // The prefix is used to create the client id which is used to identify models locally.\n  // You may want to override this if you're experiencing name clashes with model ids.\n  cidPrefix: 'c',\n\n  // preinitialize is an empty function by default. You can override it with a function\n  // or object.  preinitialize will run before any instantiation logic is run in the Model.\n  preinitialize: function(){},\n\n  // Initialize is an empty function by default. Override it with your own\n  // initialization logic.\n  initialize: function(){},\n\n  // Return a copy of the model's `attributes` object.\n  toJSON: function(options) {\n    return _.clone(this.attributes);\n  },\n\n  // Proxy `Backbone.sync` by default -- but override this if you need\n  // custom syncing semantics for *this* particular model.\n  sync: function() {\n    return Backbone.sync.apply(this, arguments);\n  },\n\n  // Get the value of an attribute.\n  get: function(attr) {\n    return this.attributes[attr];\n  },\n\n  // Get the HTML-escaped value of an attribute.\n  escape: function(attr) {\n    return _.escape(this.get(attr));\n  },\n\n  // Returns `true` if the attribute contains a value that is not null\n  // or undefined.\n  has: function(attr) {\n    return this.get(attr) != null;\n  },\n\n  // Special-cased proxy to underscore's `_.matches` method.\n  matches: function(attrs) {\n    return !!_.iteratee(attrs, this)(this.attributes);\n  },\n\n  // Set a hash of model attributes on the object, firing `\"change\"`. This is\n  // the core primitive operation of a model, updating the data and notifying\n  // anyone who needs to know about the change in state. The heart of the beast.\n  set: function(key, val, options) {\n    if (key == null) return this;\n\n    // Handle both `\"key\", value` and `{key: value}` -style arguments.\n    var attrs;\n    if (typeof key === 'object') {\n      attrs = key;\n      options = val;\n    } else {\n      (attrs = {})[key] = val;\n    }\n\n    options || (options = {});\n\n    // Run validation.\n    if (!this._validate(attrs, options)) return false;\n\n    // Extract attributes and options.\n    var unset      = options.unset;\n    var silent     = options.silent;\n    var changes    = [];\n    var changing   = this._changing;\n    this._changing = true;\n\n    if (!changing) {\n      this._previousAttributes = _.clone(this.attributes);\n      this.changed = {};\n    }\n\n    var current = this.attributes;\n    var changed = this.changed;\n    var prev    = this._previousAttributes;\n\n    // For each `set` attribute, update or delete the current value.\n    for (var attr in attrs) {\n      val = attrs[attr];\n      if (!_.isEqual(current[attr], val)) changes.push(attr);\n      if (!_.isEqual(prev[attr], val)) {\n        changed[attr] = val;\n      } else {\n        delete changed[attr];\n      }\n      unset ? delete current[attr] : current[attr] = val;\n    }\n\n    // Update the `id`.\n    if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);\n\n    // Trigger all relevant attribute changes.\n    if (!silent) {\n      if (changes.length) this._pending = options;\n      for (var i = 0; i < changes.length; i++) {\n        this.trigger('change:' + changes[i], this, current[changes[i]], options);\n      }\n    }\n\n    // You might be wondering why there's a `while` loop here. Changes can\n    // be recursively nested within `\"change\"` events.\n    if (changing) return this;\n    if (!silent) {\n      while (this._pending) {\n        options = this._pending;\n        this._pending = false;\n        this.trigger('change', this, options);\n      }\n    }\n    this._pending = false;\n    this._changing = false;\n    return this;\n  },\n\n  // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n  // if the attribute doesn't exist.\n  unset: function(attr, options) {\n    return this.set(attr, void 0, _.extend({}, options, {unset: true}));\n  },\n\n  // Clear all attributes on the model, firing `\"change\"`.\n  clear: function(options) {\n    var attrs = {};\n    for (var key in this.attributes) attrs[key] = void 0;\n    return this.set(attrs, _.extend({}, options, {unset: true}));\n  },\n\n  // Determine if the model has changed since the last `\"change\"` event.\n  // If you specify an attribute name, determine if that attribute has changed.\n  hasChanged: function(attr) {\n    if (attr == null) return !_.isEmpty(this.changed);\n    return _.has(this.changed, attr);\n  },\n\n  // Return an object containing all the attributes that have changed, or\n  // false if there are no changed attributes. Useful for determining what\n  // parts of a view need to be updated and/or what attributes need to be\n  // persisted to the server. Unset attributes will be set to undefined.\n  // You can also pass an attributes object to diff against the model,\n  // determining if there *would be* a change.\n  changedAttributes: function(diff) {\n    if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\n    var old = this._changing ? this._previousAttributes : this.attributes;\n    var changed = {};\n    var hasChanged;\n    for (var attr in diff) {\n      var val = diff[attr];\n      if (_.isEqual(old[attr], val)) continue;\n      changed[attr] = val;\n      hasChanged = true;\n    }\n    return hasChanged ? changed : false;\n  },\n\n  // Get the previous value of an attribute, recorded at the time the last\n  // `\"change\"` event was fired.\n  previous: function(attr) {\n    if (attr == null || !this._previousAttributes) return null;\n    return this._previousAttributes[attr];\n  },\n\n  // Get all of the attributes of the model at the time of the previous\n  // `\"change\"` event.\n  previousAttributes: function() {\n    return _.clone(this._previousAttributes);\n  },\n\n  // Fetch the model from the server, merging the response with the model's\n  // local attributes. Any changed attributes will trigger a \"change\" event.\n  fetch: function(options) {\n    options = _.extend({parse: true}, options);\n    var model = this;\n    var success = options.success;\n    options.success = function(resp) {\n      var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n      if (!model.set(serverAttrs, options)) return false;\n      if (success) success.call(options.context, model, resp, options);\n      model.trigger('sync', model, resp, options);\n    };\n    wrapError(this, options);\n    return this.sync('read', this, options);\n  },\n\n  // Set a hash of model attributes, and sync the model to the server.\n  // If the server returns an attributes hash that differs, the model's\n  // state will be `set` again.\n  save: function(key, val, options) {\n    // Handle both `\"key\", value` and `{key: value}` -style arguments.\n    var attrs;\n    if (key == null || typeof key === 'object') {\n      attrs = key;\n      options = val;\n    } else {\n      (attrs = {})[key] = val;\n    }\n\n    options = _.extend({validate: true, parse: true}, options);\n    var wait = options.wait;\n\n    // If we're not waiting and attributes exist, save acts as\n    // `set(attr).save(null, opts)` with validation. Otherwise, check if\n    // the model will be valid when the attributes, if any, are set.\n    if (attrs && !wait) {\n      if (!this.set(attrs, options)) return false;\n    } else if (!this._validate(attrs, options)) {\n      return false;\n    }\n\n    // After a successful server-side save, the client is (optionally)\n    // updated with the server-side state.\n    var model = this;\n    var success = options.success;\n    var attributes = this.attributes;\n    options.success = function(resp) {\n      // Ensure attributes are restored during synchronous saves.\n      model.attributes = attributes;\n      var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n      if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);\n      if (serverAttrs && !model.set(serverAttrs, options)) return false;\n      if (success) success.call(options.context, model, resp, options);\n      model.trigger('sync', model, resp, options);\n    };\n    wrapError(this, options);\n\n    // Set temporary attributes if `{wait: true}` to properly find new ids.\n    if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);\n\n    var method = this.isNew() ? 'create' : options.patch ? 'patch' : 'update';\n    if (method === 'patch' && !options.attrs) options.attrs = attrs;\n    var xhr = this.sync(method, this, options);\n\n    // Restore attributes.\n    this.attributes = attributes;\n\n    return xhr;\n  },\n\n  // Destroy this model on the server if it was already persisted.\n  // Optimistically removes the model from its collection, if it has one.\n  // If `wait: true` is passed, waits for the server to respond before removal.\n  destroy: function(options) {\n    options = options ? _.clone(options) : {};\n    var model = this;\n    var success = options.success;\n    var wait = options.wait;\n\n    var destroy = function() {\n      model.stopListening();\n      model.trigger('destroy', model, model.collection, options);\n    };\n\n    options.success = function(resp) {\n      if (wait) destroy();\n      if (success) success.call(options.context, model, resp, options);\n      if (!model.isNew()) model.trigger('sync', model, resp, options);\n    };\n\n    var xhr = false;\n    if (this.isNew()) {\n      _.defer(options.success);\n    } else {\n      wrapError(this, options);\n      xhr = this.sync('delete', this, options);\n    }\n    if (!wait) destroy();\n    return xhr;\n  },\n\n  // Default URL for the model's representation on the server -- if you're\n  // using Backbone's restful methods, override this to change the endpoint\n  // that will be called.\n  url: function() {\n    var base =\n      _.result(this, 'urlRoot') ||\n      _.result(this.collection, 'url') ||\n      urlError();\n    if (this.isNew()) return base;\n    var id = this.get(this.idAttribute);\n    return base.replace(/[^\\/]$/, '$&/') + encodeURIComponent(id);\n  },\n\n  // **parse** converts a response into the hash of attributes to be `set` on\n  // the model. The default implementation is just to pass the response along.\n  parse: function(resp, options) {\n    return resp;\n  },\n\n  // Create a new model with identical attributes to this one.\n  clone: function() {\n    return new this.constructor(this.attributes);\n  },\n\n  // A model is new if it has never been saved to the server, and lacks an id.\n  isNew: function() {\n    return !this.has(this.idAttribute);\n  },\n\n  // Check if the model is currently in a valid state.\n  isValid: function(options) {\n    return this._validate({}, _.extend({}, options, {validate: true}));\n  },\n\n  // Run validation against the next complete set of model attributes,\n  // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n  _validate: function(attrs, options) {\n    if (!options.validate || !this.validate) return true;\n    attrs = _.extend({}, this.attributes, attrs);\n    var error = this.validationError = this.validate(attrs, options) || null;\n    if (!error) return true;\n    this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n    return false;\n  }\n\n});\n\n// Set up inheritance for the model, collection, router, view and history.\nModel.extend = extend;\n\nexport default Model;\n","// Backbone.Collection\n// -------------------\n\nimport _ from 'underscore';\n\nimport Events from './Events';\nimport Model from './Model';\nimport wrapError from './Utils/wrapError';\nimport extend from './Utils/Extend';\n\n// If models tend to represent a single row of data, a Backbone Collection is\n// more analogous to a table full of data ... or a small slice or page of that\n// table, or a collection of rows that belong together for a particular reason\n// -- all of the messages in this particular folder, all of the documents\n// belonging to this particular author, and so on. Collections maintain\n// indexes of their models, both in order, and for lookup by `id`.\n\n// Create a new **Collection**, perhaps to contain a specific type of `model`.\n// If a `comparator` is specified, the Collection will maintain\n// its models in sort order, as they're added and removed.\nvar Collection = function(models, options) {\n  options || (options = {});\n  this.preinitialize.apply(this, arguments);\n  if (options.model) this.model = options.model;\n  if (options.comparator !== void 0) this.comparator = options.comparator;\n  this._reset();\n  this.initialize.apply(this, arguments);\n  if (models) this.reset(models, _.extend({silent: true}, options));\n};\n\n// Default options for `Collection#set`.\nvar setOptions = {add: true, remove: true, merge: true};\nvar addOptions = {add: true, remove: false};\n\n// Splices `insert` into `array` at index `at`.\nvar splice = function(array, insert, at) {\n  at = Math.min(Math.max(at, 0), array.length);\n  var tail = Array(array.length - at);\n  var length = insert.length;\n  var i;\n  for (i = 0; i < tail.length; i++) tail[i] = array[i + at];\n  for (i = 0; i < length; i++) array[i + at] = insert[i];\n  for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\n};\n\n// Define the Collection's inheritable methods.\n_.extend(Collection.prototype, Events, {\n\n  // The default model for a collection is just a **Backbone.Model**.\n  // This should be overridden in most cases.\n  model: Model,\n\n\n  // preinitialize is an empty function by default. You can override it with a function\n  // or object.  preinitialize will run before any instantiation logic is run in the Collection.\n  preinitialize: function(){},\n\n  // Initialize is an empty function by default. Override it with your own\n  // initialization logic.\n  initialize: function(){},\n\n  // The JSON representation of a Collection is an array of the\n  // models' attributes.\n  toJSON: function(options) {\n    return this.map(function(model) { return model.toJSON(options); });\n  },\n\n  // Proxy `Backbone.sync` by default.\n  sync: function() {\n    return Backbone.sync.apply(this, arguments);\n  },\n\n  // Add a model, or list of models to the set. `models` may be Backbone\n  // Models or raw JavaScript objects to be converted to Models, or any\n  // combination of the two.\n  add: function(models, options) {\n    return this.set(models, _.extend({merge: false}, options, addOptions));\n  },\n\n  // Remove a model, or a list of models from the set.\n  remove: function(models, options) {\n    options = _.extend({}, options);\n    var singular = !_.isArray(models);\n    models = singular ? [models] : models.slice();\n    var removed = this._removeModels(models, options);\n    if (!options.silent && removed.length) {\n      options.changes = {added: [], merged: [], removed: removed};\n      this.trigger('update', this, options);\n    }\n    return singular ? removed[0] : removed;\n  },\n\n  // Update a collection by `set`-ing a new list of models, adding new ones,\n  // removing models that are no longer present, and merging models that\n  // already exist in the collection, as necessary. Similar to **Model#set**,\n  // the core operation for updating the data contained by the collection.\n  set: function(models, options) {\n    if (models == null) return;\n\n    options = _.extend({}, setOptions, options);\n    if (options.parse && !this._isModel(models)) {\n      models = this.parse(models, options) || [];\n    }\n\n    var singular = !_.isArray(models);\n    models = singular ? [models] : models.slice();\n\n    var at = options.at;\n    if (at != null) at = +at;\n    if (at > this.length) at = this.length;\n    if (at < 0) at += this.length + 1;\n\n    var set = [];\n    var toAdd = [];\n    var toMerge = [];\n    var toRemove = [];\n    var modelMap = {};\n\n    var add = options.add;\n    var merge = options.merge;\n    var remove = options.remove;\n\n    var sort = false;\n    var sortable = this.comparator && at == null && options.sort !== false;\n    var sortAttr = _.isString(this.comparator) ? this.comparator : null;\n\n    // Turn bare objects into model references, and prevent invalid models\n    // from being added.\n    var model, i;\n    for (i = 0; i < models.length; i++) {\n      model = models[i];\n\n      // If a duplicate is found, prevent it from being added and\n      // optionally merge it into the existing model.\n      var existing = this.get(model);\n      if (existing) {\n        if (merge && model !== existing) {\n          var attrs = this._isModel(model) ? model.attributes : model;\n          if (options.parse) attrs = existing.parse(attrs, options);\n          existing.set(attrs, options);\n          toMerge.push(existing);\n          if (sortable && !sort) sort = existing.hasChanged(sortAttr);\n        }\n        if (!modelMap[existing.cid]) {\n          modelMap[existing.cid] = true;\n          set.push(existing);\n        }\n        models[i] = existing;\n\n      // If this is a new, valid model, push it to the `toAdd` list.\n      } else if (add) {\n        model = models[i] = this._prepareModel(model, options);\n        if (model) {\n          toAdd.push(model);\n          this._addReference(model, options);\n          modelMap[model.cid] = true;\n          set.push(model);\n        }\n      }\n    }\n\n    // Remove stale models.\n    if (remove) {\n      for (i = 0; i < this.length; i++) {\n        model = this.models[i];\n        if (!modelMap[model.cid]) toRemove.push(model);\n      }\n      if (toRemove.length) this._removeModels(toRemove, options);\n    }\n\n    // See if sorting is needed, update `length` and splice in new models.\n    var orderChanged = false;\n    var replace = !sortable && add && remove;\n    if (set.length && replace) {\n      orderChanged = this.length !== set.length || _.some(this.models, function(m, index) {\n        return m !== set[index];\n      });\n      this.models.length = 0;\n      splice(this.models, set, 0);\n      this.length = this.models.length;\n    } else if (toAdd.length) {\n      if (sortable) sort = true;\n      splice(this.models, toAdd, at == null ? this.length : at);\n      this.length = this.models.length;\n    }\n\n    // Silently sort the collection if appropriate.\n    if (sort) this.sort({silent: true});\n\n    // Unless silenced, it's time to fire all appropriate add/sort/update events.\n    if (!options.silent) {\n      for (i = 0; i < toAdd.length; i++) {\n        if (at != null) options.index = at + i;\n        model = toAdd[i];\n        model.trigger('add', model, this, options);\n      }\n      if (sort || orderChanged) this.trigger('sort', this, options);\n      if (toAdd.length || toRemove.length || toMerge.length) {\n        options.changes = {\n          added: toAdd,\n          removed: toRemove,\n          merged: toMerge\n        };\n        this.trigger('update', this, options);\n      }\n    }\n\n    // Return the added (or merged) model (or models).\n    return singular ? models[0] : models;\n  },\n\n  // When you have more items than you want to add or remove individually,\n  // you can reset the entire set with a new list of models, without firing\n  // any granular `add` or `remove` events. Fires `reset` when finished.\n  // Useful for bulk operations and optimizations.\n  reset: function(models, options) {\n    options = options ? _.clone(options) : {};\n    for (var i = 0; i < this.models.length; i++) {\n      this._removeReference(this.models[i], options);\n    }\n    options.previousModels = this.models;\n    this._reset();\n    models = this.add(models, _.extend({silent: true}, options));\n    if (!options.silent) this.trigger('reset', this, options);\n    return models;\n  },\n\n  // Add a model to the end of the collection.\n  push: function(model, options) {\n    return this.add(model, _.extend({at: this.length}, options));\n  },\n\n  // Remove a model from the end of the collection.\n  pop: function(options) {\n    var model = this.at(this.length - 1);\n    return this.remove(model, options);\n  },\n\n  // Add a model to the beginning of the collection.\n  unshift: function(model, options) {\n    return this.add(model, _.extend({at: 0}, options));\n  },\n\n  // Remove a model from the beginning of the collection.\n  shift: function(options) {\n    var model = this.at(0);\n    return this.remove(model, options);\n  },\n\n  // Slice out a sub-array of models from the collection.\n  slice: function() {\n    return Array.prototype.slice.apply(this.models, arguments);\n  },\n\n  // Get a model from the set by id, cid, model object with id or cid\n  // properties, or an attributes object that is transformed through modelId.\n  get: function(obj) {\n    if (obj == null) return void 0;\n    return this._byId[obj] ||\n      this._byId[this.modelId(this._isModel(obj) ? obj.attributes : obj)] ||\n      obj.cid && this._byId[obj.cid];\n  },\n\n  // Returns `true` if the model is in the collection.\n  has: function(obj) {\n    return this.get(obj) != null;\n  },\n\n  // Get the model at the given index.\n  at: function(index) {\n    if (index < 0) index += this.length;\n    return this.models[index];\n  },\n\n  // Return models with matching attributes. Useful for simple cases of\n  // `filter`.\n  where: function(attrs, first) {\n    return this[first ? 'find' : 'filter'](attrs);\n  },\n\n  // Return the first model with matching attributes. Useful for simple cases\n  // of `find`.\n  findWhere: function(attrs) {\n    return this.where(attrs, true);\n  },\n\n  // Force the collection to re-sort itself. You don't need to call this under\n  // normal circumstances, as the set will maintain sort order as each item\n  // is added.\n  sort: function(options) {\n    var comparator = this.comparator;\n    if (!comparator) throw new Error('Cannot sort a set without a comparator');\n    options || (options = {});\n\n    var length = comparator.length;\n    if (_.isFunction(comparator)) comparator = _.bind(comparator, this);\n\n    // Run sort based on type of `comparator`.\n    if (length === 1 || _.isString(comparator)) {\n      this.models = this.sortBy(comparator);\n    } else {\n      this.models.sort(comparator);\n    }\n    if (!options.silent) this.trigger('sort', this, options);\n    return this;\n  },\n\n  // Pluck an attribute from each model in the collection.\n  pluck: function(attr) {\n    return this.map(attr + '');\n  },\n\n  // Fetch the default set of models for this collection, resetting the\n  // collection when they arrive. If `reset: true` is passed, the response\n  // data will be passed through the `reset` method instead of `set`.\n  fetch: function(options) {\n    options = _.extend({parse: true}, options);\n    var success = options.success;\n    var collection = this;\n    options.success = function(resp) {\n      var method = options.reset ? 'reset' : 'set';\n      collection[method](resp, options);\n      if (success) success.call(options.context, collection, resp, options);\n      collection.trigger('sync', collection, resp, options);\n    };\n    wrapError(this, options);\n    return this.sync('read', this, options);\n  },\n\n  // Create a new instance of a model in this collection. Add the model to the\n  // collection immediately, unless `wait: true` is passed, in which case we\n  // wait for the server to agree.\n  create: function(model, options) {\n    options = options ? _.clone(options) : {};\n    var wait = options.wait;\n    model = this._prepareModel(model, options);\n    if (!model) return false;\n    if (!wait) this.add(model, options);\n    var collection = this;\n    var success = options.success;\n    options.success = function(m, resp, callbackOpts) {\n      if (wait) collection.add(m, callbackOpts);\n      if (success) success.call(callbackOpts.context, m, resp, callbackOpts);\n    };\n    model.save(null, options);\n    return model;\n  },\n\n  // **parse** converts a response into a list of models to be added to the\n  // collection. The default implementation is just to pass it through.\n  parse: function(resp, options) {\n    return resp;\n  },\n\n  // Create a new collection with an identical list of models as this one.\n  clone: function() {\n    return new this.constructor(this.models, {\n      model: this.model,\n      comparator: this.comparator\n    });\n  },\n\n  // Define how to uniquely identify models in the collection.\n  modelId: function(attrs) {\n    return attrs[this.model.prototype.idAttribute || 'id'];\n  },\n\n  // Get an iterator of all models in this collection.\n  values: function() {\n    return new CollectionIterator(this, ITERATOR_VALUES);\n  },\n\n  // Get an iterator of all model IDs in this collection.\n  keys: function() {\n    return new CollectionIterator(this, ITERATOR_KEYS);\n  },\n\n  // Get an iterator of all [ID, model] tuples in this collection.\n  entries: function() {\n    return new CollectionIterator(this, ITERATOR_KEYSVALUES);\n  },\n\n  // Private method to reset all internal state. Called when the collection\n  // is first initialized or reset.\n  _reset: function() {\n    this.length = 0;\n    this.models = [];\n    this._byId  = {};\n  },\n\n  // Prepare a hash of attributes (or other model) to be added to this\n  // collection.\n  _prepareModel: function(attrs, options) {\n    if (this._isModel(attrs)) {\n      if (!attrs.collection) attrs.collection = this;\n      return attrs;\n    }\n    options = options ? _.clone(options) : {};\n    options.collection = this;\n    var model = new this.model(attrs, options);\n    if (!model.validationError) return model;\n    this.trigger('invalid', this, model.validationError, options);\n    return false;\n  },\n\n  // Internal method called by both remove and set.\n  _removeModels: function(models, options) {\n    var removed = [];\n    for (var i = 0; i < models.length; i++) {\n      var model = this.get(models[i]);\n      if (!model) continue;\n\n      var index = this.indexOf(model);\n      this.models.splice(index, 1);\n      this.length--;\n\n      // Remove references before triggering 'remove' event to prevent an\n      // infinite loop. #3693\n      delete this._byId[model.cid];\n      var id = this.modelId(model.attributes);\n      if (id != null) delete this._byId[id];\n\n      if (!options.silent) {\n        options.index = index;\n        model.trigger('remove', model, this, options);\n      }\n\n      removed.push(model);\n      this._removeReference(model, options);\n    }\n    return removed;\n  },\n\n  // Method for checking whether an object should be considered a model for\n  // the purposes of adding to the collection.\n  _isModel: function(model) {\n    return model instanceof Model;\n  },\n\n  // Internal method to create a model's ties to a collection.\n  _addReference: function(model, options) {\n    this._byId[model.cid] = model;\n    var id = this.modelId(model.attributes);\n    if (id != null) this._byId[id] = model;\n    model.on('all', this._onModelEvent, this);\n  },\n\n  // Internal method to sever a model's ties to a collection.\n  _removeReference: function(model, options) {\n    delete this._byId[model.cid];\n    var id = this.modelId(model.attributes);\n    if (id != null) delete this._byId[id];\n    if (this === model.collection) delete model.collection;\n    model.off('all', this._onModelEvent, this);\n  },\n\n  // Internal method called every time a model in the set fires an event.\n  // Sets need to update their indexes when models change ids. All other\n  // events simply proxy through. \"add\" and \"remove\" events that originate\n  // in other collections are ignored.\n  _onModelEvent: function(event, model, collection, options) {\n    if (model) {\n      if ((event === 'add' || event === 'remove') && collection !== this) return;\n      if (event === 'destroy') this.remove(model, options);\n      if (event === 'change') {\n        var prevId = this.modelId(model.previousAttributes());\n        var id = this.modelId(model.attributes);\n        if (prevId !== id) {\n          if (prevId != null) delete this._byId[prevId];\n          if (id != null) this._byId[id] = model;\n        }\n      }\n    }\n    this.trigger.apply(this, arguments);\n  }\n\n});\n\n// Defining an @@iterator method implements JavaScript's Iterable protocol.\n// In modern ES2015 browsers, this value is found at Symbol.iterator.\n/* global Symbol */\nvar $$iterator = typeof Symbol === 'function' && Symbol.iterator;\nif ($$iterator) {\n  Collection.prototype[$$iterator] = Collection.prototype.values;\n}\n\n// CollectionIterator\n// ------------------\n\n// A CollectionIterator implements JavaScript's Iterator protocol, allowing the\n// use of `for of` loops in modern browsers and interoperation between\n// Backbone.Collection and other JavaScript functions and third-party libraries\n// which can operate on Iterables.\nvar CollectionIterator = function(collection, kind) {\n  this._collection = collection;\n  this._kind = kind;\n  this._index = 0;\n};\n\n// This \"enum\" defines the three possible kinds of values which can be emitted\n// by a CollectionIterator that correspond to the values(), keys() and entries()\n// methods on Collection, respectively.\nvar ITERATOR_VALUES = 1;\nvar ITERATOR_KEYS = 2;\nvar ITERATOR_KEYSVALUES = 3;\n\n// All Iterators should themselves be Iterable.\nif ($$iterator) {\n  CollectionIterator.prototype[$$iterator] = function() {\n    return this;\n  };\n}\n\nCollectionIterator.prototype.next = function() {\n  if (this._collection) {\n\n    // Only continue iterating if the iterated collection is long enough.\n    if (this._index < this._collection.length) {\n      var model = this._collection.at(this._index);\n      this._index++;\n\n      // Construct a value depending on what kind of values should be iterated.\n      var value;\n      if (this._kind === ITERATOR_VALUES) {\n        value = model;\n      } else {\n        var id = this._collection.modelId(model.attributes);\n        if (this._kind === ITERATOR_KEYS) {\n          value = id;\n        } else { // ITERATOR_KEYSVALUES\n          value = [id, model];\n        }\n      }\n      return {value: value, done: false};\n    }\n\n    // Once exhausted, remove the reference to the collection so future\n    // calls to the next method always return done.\n    this._collection = void 0;\n  }\n\n  return {value: void 0, done: true};\n};\n\nCollection.extend = extend;\n\nexport default Collection;\n","// Backbone.View\n// -------------\n\nimport _ from 'underscore';\nimport $ from 'jQuery';\n\nimport Events from './Events';\nimport extend from './Utils/Extend';\n\n// Backbone Views are almost more convention than they are actual code. A View\n// is simply a JavaScript object that represents a logical chunk of UI in the\n// DOM. This might be a single item, an entire list, a sidebar or panel, or\n// even the surrounding frame which wraps your whole app. Defining a chunk of\n// UI as a **View** allows you to define your DOM events declaratively, without\n// having to worry about render order ... and makes it easy for the view to\n// react to specific changes in the state of your models.\n\n// Creating a Backbone.View creates its initial element outside of the DOM,\n// if an existing element is not provided...\nvar View = function(options) {\n  this.cid = _.uniqueId('view');\n  this.preinitialize.apply(this, arguments);\n  _.extend(this, _.pick(options, viewOptions));\n  this._ensureElement();\n  this.initialize.apply(this, arguments);\n};\n\n// Cached regex to split keys for `delegate`.\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n// List of view options to be set as properties.\nvar viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n// Set up all inheritable **Backbone.View** properties and methods.\n_.extend(View.prototype, Events, {\n\n  // The default `tagName` of a View's element is `\"div\"`.\n  tagName: 'div',\n\n  // jQuery delegate for element lookup, scoped to DOM elements within the\n  // current view. This should be preferred to global lookups where possible.\n  $: function(selector) {\n    return this.$el.find(selector);\n  },\n\n  // preinitialize is an empty function by default. You can override it with a function\n  // or object.  preinitialize will run before any instantiation logic is run in the View\n  preinitialize: function(){},\n\n  // Initialize is an empty function by default. Override it with your own\n  // initialization logic.\n  initialize: function(){},\n\n  // **render** is the core function that your view should override, in order\n  // to populate its element (`this.el`), with the appropriate HTML. The\n  // convention is for **render** to always return `this`.\n  render: function() {\n    return this;\n  },\n\n  // Remove this view by taking the element out of the DOM, and removing any\n  // applicable Backbone.Events listeners.\n  remove: function() {\n    this._removeElement();\n    this.stopListening();\n    return this;\n  },\n\n  // Remove this view's element from the document and all event listeners\n  // attached to it. Exposed for subclasses using an alternative DOM\n  // manipulation API.\n  _removeElement: function() {\n    this.$el.remove();\n  },\n\n  // Change the view's element (`this.el` property) and re-delegate the\n  // view's events on the new element.\n  setElement: function(element) {\n    this.undelegateEvents();\n    this._setElement(element);\n    this.delegateEvents();\n    return this;\n  },\n\n  // Creates the `this.el` and `this.$el` references for this view using the\n  // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\n  // context or an element. Subclasses can override this to utilize an\n  // alternative DOM manipulation API and are only required to set the\n  // `this.el` property.\n  _setElement: function(el) {\n    this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);\n    this.el = this.$el[0];\n  },\n\n  // Set callbacks, where `this.events` is a hash of\n  //\n  // *{\"event selector\": \"callback\"}*\n  //\n  //     {\n  //       'mousedown .title':  'edit',\n  //       'click .button':     'save',\n  //       'click .open':       function(e) { ... }\n  //     }\n  //\n  // pairs. Callbacks will be bound to the view, with `this` set properly.\n  // Uses event delegation for efficiency.\n  // Omitting the selector binds the event to `this.el`.\n  delegateEvents: function(events) {\n    events || (events = _.result(this, 'events'));\n    if (!events) return this;\n    this.undelegateEvents();\n    for (var key in events) {\n      var method = events[key];\n      if (!_.isFunction(method)) method = this[method];\n      if (!method) continue;\n      var match = key.match(delegateEventSplitter);\n      this.delegate(match[1], match[2], _.bind(method, this));\n    }\n    return this;\n  },\n\n  // Add a single event listener to the view's element (or a child element\n  // using `selector`). This only works for delegate-able events: not `focus`,\n  // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\n  delegate: function(eventName, selector, listener) {\n    this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);\n    return this;\n  },\n\n  // Clears all callbacks previously bound to the view by `delegateEvents`.\n  // You usually don't need to use this, but may wish to if you have multiple\n  // Backbone views attached to the same DOM element.\n  undelegateEvents: function() {\n    if (this.$el) this.$el.off('.delegateEvents' + this.cid);\n    return this;\n  },\n\n  // A finer-grained `undelegateEvents` for removing a single delegated event.\n  // `selector` and `listener` are both optional.\n  undelegate: function(eventName, selector, listener) {\n    this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);\n    return this;\n  },\n\n  // Produces a DOM element to be assigned to your view. Exposed for\n  // subclasses using an alternative DOM manipulation API.\n  _createElement: function(tagName) {\n    return document.createElement(tagName);\n  },\n\n  // Ensure that the View has a DOM element to render into.\n  // If `this.el` is a string, pass it through `$()`, take the first\n  // matching element, and re-assign it to `el`. Otherwise, create\n  // an element from the `id`, `className` and `tagName` properties.\n  _ensureElement: function() {\n    if (!this.el) {\n      var attrs = _.extend({}, _.result(this, 'attributes'));\n      if (this.id) attrs.id = _.result(this, 'id');\n      if (this.className) attrs['class'] = _.result(this, 'className');\n      this.setElement(this._createElement(_.result(this, 'tagName')));\n      this._setAttributes(attrs);\n    } else {\n      this.setElement(_.result(this, 'el'));\n    }\n  },\n\n  // Set attributes from a hash on this view's element.  Exposed for\n  // subclasses using an alternative DOM manipulation API.\n  _setAttributes: function(attributes) {\n    this.$el.attr(attributes);\n  }\n\n});\n\nView.extend = extend;\n\nexport default View;\n","//\n//  urlError\n//\n\n// Throw an error when a URL is needed, and none is supplied.\n\nvar urlError = function() {\n  throw new Error('A \"url\" property or function must be specified');\n};\n\nexport default urlError;\n","// BackboneJS.sync\n// ---------------\n\nimport _ from 'underscore';\n\nimport urlError from './utils/urlError';\n\n// Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n// will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n// set a `X-Http-Method-Override` header.\nlet emulateHTTP = false;\n\n// Turn on `emulateJSON` to support legacy servers that can't deal with direct\n// `application/json` requests ... this will encode the body as\n// `application/x-www-form-urlencoded` instead and will send the model in a\n// form param named `model`.\nlet emulateJSON = false;\n\n// Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n\nconst methodMap = {\n  create: 'POST',\n  update: 'PUT',\n  patch: 'PATCH',\n  delete: 'DELETE',\n  read: 'GET'\n};\n\n// Override this function to change the manner in which Backbone persists\n// models to the server. You will be passed the type of request, and the\n// model in question. By default, makes a RESTful Ajax request\n// to the model's `url()`. Some possible customizations could be:\n//\n// * Use `setTimeout` to batch rapid-fire updates into a single request.\n// * Send up the models as XML instead of JSON.\n// * Persist models via WebSockets instead of Ajax.\n//\n// Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n// as `POST`, with a `_method` parameter containing the true HTTP method,\n// as well as all requests with the body as `application/x-www-form-urlencoded`\n// instead of `application/json` with the model in a param named `model`.\n// Useful when interfacing with server-side languages like **PHP** that make\n// it difficult to read the body of `PUT` requests.\n\n// Backbone.sync\n// -------------\n\n// Override this function to change the manner in which Backbone persists\n// models to the server. You will be passed the type of request, and the\n// model in question. By default, makes a RESTful Ajax request\n// to the model's `url()`. Some possible customizations could be:\n//\n// * Use `setTimeout` to batch rapid-fire updates into a single request.\n// * Send up the models as XML instead of JSON.\n// * Persist models via WebSockets instead of Ajax.\n//\n// Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n// as `POST`, with a `_method` parameter containing the true HTTP method,\n// as well as all requests with the body as `application/x-www-form-urlencoded`\n// instead of `application/json` with the model in a param named `model`.\n// Useful when interfacing with server-side languages like **PHP** that make\n// it difficult to read the body of `PUT` requests.\nvar sync = function(method, model, options) {\n  var type = methodMap[method];\n\n  // Default options, unless specified.\n  _.defaults(options || (options = {}), {\n    emulateHTTP: Backbone.emulateHTTP,\n    emulateJSON: Backbone.emulateJSON\n  });\n\n  // Default JSON-request options.\n  var params = {type: type, dataType: 'json'};\n\n  // Ensure that we have a URL.\n  if (!options.url) {\n    params.url = _.result(model, 'url') || urlError();\n  }\n\n  // Ensure that we have the appropriate request data.\n  if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n    params.contentType = 'application/json';\n    params.data = JSON.stringify(options.attrs || model.toJSON(options));\n  }\n\n  // For older servers, emulate JSON by encoding the request into an HTML-form.\n  if (options.emulateJSON) {\n    params.contentType = 'application/x-www-form-urlencoded';\n    params.data = params.data ? {model: params.data} : {};\n  }\n\n  // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n  // And an `X-HTTP-Method-Override` header.\n  if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n    params.type = 'POST';\n    if (options.emulateJSON) params.data._method = type;\n    var beforeSend = options.beforeSend;\n    options.beforeSend = function(xhr) {\n      xhr.setRequestHeader('X-HTTP-Method-Override', type);\n      if (beforeSend) return beforeSend.apply(this, arguments);\n    };\n  }\n\n  // Don't process data on a non-GET request.\n  if (params.type !== 'GET' && !options.emulateJSON) {\n    params.processData = false;\n  }\n\n  // Pass along `textStatus` and `errorThrown` from jQuery.\n  var error = options.error;\n  options.error = function(xhr, textStatus, errorThrown) {\n    options.textStatus = textStatus;\n    options.errorThrown = errorThrown;\n    if (error) error.call(options.context, xhr, textStatus, errorThrown);\n  };\n\n  // Make the request, allowing the user to override any Ajax options.\n  var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n  model.trigger('request', model, xhr, options);\n  return xhr;\n};\n\nexport default sync;\n","// Backbone.Router\n// ---------------\n\nimport _ from 'underscore';\n\nimport Events from './Events';\nimport extend from './Utils/Extend';\n\n// Routers map faux-URLs to actions, and fire events when routes are\n// matched. Creating a new one sets its `routes` hash, if not set statically.\nvar Router = function(options) {\n  options || (options = {});\n  this.preinitialize.apply(this, arguments);\n  if (options.routes) this.routes = options.routes;\n  this._bindRoutes();\n  this.initialize.apply(this, arguments);\n};\n\n// Cached regular expressions for matching named param parts and splatted\n// parts of route strings.\nvar optionalParam = /\\((.*?)\\)/g;\nvar namedParam    = /(\\(\\?)?:\\w+/g;\nvar splatParam    = /\\*\\w+/g;\nvar escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n// Set up all inheritable **Backbone.Router** properties and methods.\n_.extend(Router.prototype, Events, {\n\n  // preinitialize is an empty function by default. You can override it with a function\n  // or object.  preinitialize will run before any instantiation logic is run in the Router.\n  preinitialize: function(){},\n\n  // Initialize is an empty function by default. Override it with your own\n  // initialization logic.\n  initialize: function(){},\n\n  // Manually bind a single named route to a callback. For example:\n  //\n  //     this.route('search/:query/p:num', 'search', function(query, num) {\n  //       ...\n  //     });\n  //\n  route: function(route, name, callback) {\n    if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n    if (_.isFunction(name)) {\n      callback = name;\n      name = '';\n    }\n    if (!callback) callback = this[name];\n    var router = this;\n    Backbone.history.route(route, function(fragment) {\n      var args = router._extractParameters(route, fragment);\n      if (router.execute(callback, args, name) !== false) {\n        router.trigger.apply(router, ['route:' + name].concat(args));\n        router.trigger('route', name, args);\n        Backbone.history.trigger('route', router, name, args);\n      }\n    });\n    return this;\n  },\n\n  // Execute a route handler with the provided parameters.  This is an\n  // excellent place to do pre-route setup or post-route cleanup.\n  execute: function(callback, args, name) {\n    if (callback) callback.apply(this, args);\n  },\n\n  // Simple proxy to `Backbone.history` to save a fragment into the history.\n  navigate: function(fragment, options) {\n    Backbone.history.navigate(fragment, options);\n    return this;\n  },\n\n  // Bind all defined routes to `Backbone.history`. We have to reverse the\n  // order of the routes here to support behavior where the most general\n  // routes can be defined at the bottom of the route map.\n  _bindRoutes: function() {\n    if (!this.routes) return;\n    this.routes = _.result(this, 'routes');\n    var route, routes = _.keys(this.routes);\n    while ((route = routes.pop()) != null) {\n      this.route(route, this.routes[route]);\n    }\n  },\n\n  // Convert a route string into a regular expression, suitable for matching\n  // against the current location hash.\n  _routeToRegExp: function(route) {\n    route =  route.replace(escapeRegExp, '\\\\$&')\n                  .replace(optionalParam, '(?:$1)?')\n                  .replace(namedParam, function(match, optional) {\n                    return optional ? match : '([^/?]+)';\n                  })\n                  .replace(splatParam, '([^?]*?)');\n    return new RegExp('^' + route + '(?:\\\\?([\\\\s\\\\S]*))?$');\n  },\n\n  // Given a route, and a URL fragment that it matches, return the array of\n  // extracted decoded parameters. Empty or unmatched parameters will be\n  // treated as `null` to normalize cross-browser behavior.\n  _extractParameters: function(route, fragment) {\n    var params = route.exec(fragment).slice(1);\n    return _.map(params, function(param, i) {\n      // Don't decode the search params.\n      if (i === params.length - 1) return param || null;\n      return param ? decodeURIComponent(param) : null;\n    });\n  }\n\n});\n\nRouter.extend = extend;\n\nexport default Router;\n","// Backbone.History\n// ----------------\n\nimport _ from 'underscore';\n\nimport Events from './Events';\nimport extend from './Utils/Extend';\n\n// Handles cross-browser history management, based on either\n// [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n// [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n// and URL fragments. If the browser supports neither (old IE, natch),\n// falls back to polling.\nvar History = function() {\n  this.handlers = [];\n  this.checkUrl = _.bind(this.checkUrl, this);\n\n  // Ensure that `History` can be used outside of the browser.\n  if (typeof window !== 'undefined') {\n    this.location = window.location;\n    this.history = window.history;\n  }\n};\n\n// Cached regex for stripping a leading hash/slash and trailing space.\nvar routeStripper = /^[#\\/]|\\s+$/g;\n\n// Cached regex for stripping leading and trailing slashes.\nvar rootStripper = /^\\/+|\\/+$/g;\n\n// Cached regex for stripping urls of hash.\nvar pathStripper = /#.*$/;\n\n// Has the history handling already been started?\nHistory.started = false;\n\n// Set up all inheritable **Backbone.History** properties and methods.\n_.extend(History.prototype, Events, {\n\n  // The default interval to poll for hash changes, if necessary, is\n  // twenty times a second.\n  interval: 50,\n\n  // Are we at the app root?\n  atRoot: function() {\n    var path = this.location.pathname.replace(/[^\\/]$/, '$&/');\n    return path === this.root && !this.getSearch();\n  },\n\n  // Does the pathname match the root?\n  matchRoot: function() {\n    var path = this.decodeFragment(this.location.pathname);\n    var rootPath = path.slice(0, this.root.length - 1) + '/';\n    return rootPath === this.root;\n  },\n\n  // Unicode characters in `location.pathname` are percent encoded so they're\n  // decoded for comparison. `%25` should not be decoded since it may be part\n  // of an encoded parameter.\n  decodeFragment: function(fragment) {\n    return decodeURI(fragment.replace(/%25/g, '%2525'));\n  },\n\n  // In IE6, the hash fragment and search params are incorrect if the\n  // fragment contains `?`.\n  getSearch: function() {\n    var match = this.location.href.replace(/#.*/, '').match(/\\?.+/);\n    return match ? match[0] : '';\n  },\n\n  // Gets the true hash value. Cannot use location.hash directly due to bug\n  // in Firefox where location.hash will always be decoded.\n  getHash: function(window) {\n    var match = (window || this).location.href.match(/#(.*)$/);\n    return match ? match[1] : '';\n  },\n\n  // Get the pathname and search params, without the root.\n  getPath: function() {\n    var path = this.decodeFragment(\n      this.location.pathname + this.getSearch()\n    ).slice(this.root.length - 1);\n    return path.charAt(0) === '/' ? path.slice(1) : path;\n  },\n\n  // Get the cross-browser normalized URL fragment from the path or hash.\n  getFragment: function(fragment) {\n    if (fragment == null) {\n      if (this._usePushState || !this._wantsHashChange) {\n        fragment = this.getPath();\n      } else {\n        fragment = this.getHash();\n      }\n    }\n    return fragment.replace(routeStripper, '');\n  },\n\n  // Start the hash change handling, returning `true` if the current URL matches\n  // an existing route, and `false` otherwise.\n  start: function(options) {\n    if (History.started) throw new Error('Backbone.history has already been started');\n    History.started = true;\n\n    // Figure out the initial configuration. Do we need an iframe?\n    // Is pushState desired ... is it available?\n    this.options          = _.extend({root: '/'}, this.options, options);\n    this.root             = this.options.root;\n    this._wantsHashChange = this.options.hashChange !== false;\n    this._hasHashChange   = 'onhashchange' in window && (document.documentMode === void 0 || document.documentMode > 7);\n    this._useHashChange   = this._wantsHashChange && this._hasHashChange;\n    this._wantsPushState  = !!this.options.pushState;\n    this._hasPushState    = !!(this.history && this.history.pushState);\n    this._usePushState    = this._wantsPushState && this._hasPushState;\n    this.fragment         = this.getFragment();\n\n    // Normalize root to always include a leading and trailing slash.\n    this.root = ('/' + this.root + '/').replace(rootStripper, '/');\n\n    // Transition from hashChange to pushState or vice versa if both are\n    // requested.\n    if (this._wantsHashChange && this._wantsPushState) {\n\n      // If we've started off with a route from a `pushState`-enabled\n      // browser, but we're currently in a browser that doesn't support it...\n      if (!this._hasPushState && !this.atRoot()) {\n        var rootPath = this.root.slice(0, -1) || '/';\n        this.location.replace(rootPath + '#' + this.getPath());\n        // Return immediately as browser will do redirect to new url\n        return true;\n\n      // Or if we've started out with a hash-based route, but we're currently\n      // in a browser where it could be `pushState`-based instead...\n      } else if (this._hasPushState && this.atRoot()) {\n        this.navigate(this.getHash(), {replace: true});\n      }\n\n    }\n\n    // Proxy an iframe to handle location events if the browser doesn't\n    // support the `hashchange` event, HTML5 history, or the user wants\n    // `hashChange` but not `pushState`.\n    if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {\n      this.iframe = document.createElement('iframe');\n      this.iframe.src = 'javascript:0';\n      this.iframe.style.display = 'none';\n      this.iframe.tabIndex = -1;\n      var body = document.body;\n      // Using `appendChild` will throw on IE < 9 if the document is not ready.\n      var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;\n      iWindow.document.open();\n      iWindow.document.close();\n      iWindow.location.hash = '#' + this.fragment;\n    }\n\n    // Add a cross-platform `addEventListener` shim for older browsers.\n    var addEventListener = window.addEventListener || function(eventName, listener) {\n      return attachEvent('on' + eventName, listener);\n    };\n\n    // Depending on whether we're using pushState or hashes, and whether\n    // 'onhashchange' is supported, determine how we check the URL state.\n    if (this._usePushState) {\n      addEventListener('popstate', this.checkUrl, false);\n    } else if (this._useHashChange && !this.iframe) {\n      addEventListener('hashchange', this.checkUrl, false);\n    } else if (this._wantsHashChange) {\n      this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n    }\n\n    if (!this.options.silent) return this.loadUrl();\n  },\n\n  // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n  // but possibly useful for unit testing Routers.\n  stop: function() {\n    // Add a cross-platform `removeEventListener` shim for older browsers.\n    var removeEventListener = window.removeEventListener || function(eventName, listener) {\n      return detachEvent('on' + eventName, listener);\n    };\n\n    // Remove window listeners.\n    if (this._usePushState) {\n      removeEventListener('popstate', this.checkUrl, false);\n    } else if (this._useHashChange && !this.iframe) {\n      removeEventListener('hashchange', this.checkUrl, false);\n    }\n\n    // Clean up the iframe if necessary.\n    if (this.iframe) {\n      document.body.removeChild(this.iframe);\n      this.iframe = null;\n    }\n\n    // Some environments will throw when clearing an undefined interval.\n    if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);\n    History.started = false;\n  },\n\n  // Add a route to be tested when the fragment changes. Routes added later\n  // may override previous routes.\n  route: function(route, callback) {\n    this.handlers.unshift({route: route, callback: callback});\n  },\n\n  // Checks the current URL to see if it has changed, and if it has,\n  // calls `loadUrl`, normalizing across the hidden iframe.\n  checkUrl: function(e) {\n    var current = this.getFragment();\n\n    // If the user pressed the back button, the iframe's hash will have\n    // changed and we should use that for comparison.\n    if (current === this.fragment && this.iframe) {\n      current = this.getHash(this.iframe.contentWindow);\n    }\n\n    if (current === this.fragment) return false;\n    if (this.iframe) this.navigate(current);\n    this.loadUrl();\n  },\n\n  // Attempt to load the current URL fragment. If a route succeeds with a\n  // match, returns `true`. If no defined routes matches the fragment,\n  // returns `false`.\n  loadUrl: function(fragment) {\n    // If the root doesn't match, no routes can match either.\n    if (!this.matchRoot()) return false;\n    fragment = this.fragment = this.getFragment(fragment);\n    return _.some(this.handlers, function(handler) {\n      if (handler.route.test(fragment)) {\n        handler.callback(fragment);\n        return true;\n      }\n    });\n  },\n\n  // Save a fragment into the hash history, or replace the URL state if the\n  // 'replace' option is passed. You are responsible for properly URL-encoding\n  // the fragment in advance.\n  //\n  // The options object can contain `trigger: true` if you wish to have the\n  // route callback be fired (not usually desirable), or `replace: true`, if\n  // you wish to modify the current URL without adding an entry to the history.\n  navigate: function(fragment, options) {\n    if (!History.started) return false;\n    if (!options || options === true) options = {trigger: !!options};\n\n    // Normalize the fragment.\n    fragment = this.getFragment(fragment || '');\n\n    // Don't include a trailing slash on the root.\n    var rootPath = this.root;\n    if (fragment === '' || fragment.charAt(0) === '?') {\n      rootPath = rootPath.slice(0, -1) || '/';\n    }\n    var url = rootPath + fragment;\n\n    // Strip the fragment of the query and hash for matching.\n    fragment = fragment.replace(pathStripper, '');\n\n    // Decode for matching.\n    var decodedFragment = this.decodeFragment(fragment);\n\n    if (this.fragment === decodedFragment) return;\n    this.fragment = decodedFragment;\n\n    // If pushState is available, we use it to set the fragment as a real URL.\n    if (this._usePushState) {\n      this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\n\n    // If hash changes haven't been explicitly disabled, update the hash\n    // fragment to store history.\n    } else if (this._wantsHashChange) {\n      this._updateHash(this.location, fragment, options.replace);\n      if (this.iframe && fragment !== this.getHash(this.iframe.contentWindow)) {\n        var iWindow = this.iframe.contentWindow;\n\n        // Opening and closing the iframe tricks IE7 and earlier to push a\n        // history entry on hash-tag change.  When replace is true, we don't\n        // want this.\n        if (!options.replace) {\n          iWindow.document.open();\n          iWindow.document.close();\n        }\n\n        this._updateHash(iWindow.location, fragment, options.replace);\n      }\n\n    // If you've told us that you explicitly don't want fallback hashchange-\n    // based history, then `navigate` becomes a page refresh.\n    } else {\n      return this.location.assign(url);\n    }\n    if (options.trigger) return this.loadUrl(fragment);\n  },\n\n  // Update the hash location, either replacing the current entry, or adding\n  // a new one to the browser history.\n  _updateHash: function(location, fragment, replace) {\n    if (replace) {\n      var href = location.href.replace(/(javascript:|#).*$/, '');\n      location.replace(href + '#' + fragment);\n    } else {\n      // Some browsers require that `hash` contains a leading #.\n      location.hash = '#' + fragment;\n    }\n  }\n\n});\n\nHistory.extend = extend;\n\nexport default History;\n","//\n//  BackboneJS.js - BackboneJS Framework.\n//\n//  Copyright (c) 2010-2017 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//  Copyright (c) 2017 Aaron Nathaniel Gray\n//  Distributed under the MIT License\n//\n\nimport _ from 'underscore';\nimport $ from 'jQuery';\n\nimport {version} from '../package.json';\n\nimport Events from './Events';\n\nimport Model from './Model';\nimport Collection from './Collection';\n\nimport View from './View';\n\nimport sync from './Sync';\nimport ajax from './AJAX';\n\nimport Router from './Router';\n\nimport History from './History';\nimport history from './History';\n\n//import urlError from './Utils/urlError';\n//import wrapError from './Utils/wrapError';\n\nvar Backbone = {};\nBackbone.VERSION = version;\n\nBackbone._ = _;\nBackbone.$ = $;\n\n// ------------------------------------------------------------------------- //\n// Allow the `Backbone` object to serve as a global event bus, for folks who\n// want global \"pubsub\" in a convenient place.\n\nBackbone.Events = Events;\n_.extend(Backbone, Events);\n\nBackbone.Model = Model;\nBackbone.View = View;\n\n// Proxy Backbone class methods to Underscore functions, wrapping the model's\n// `attributes` object or collection's `models` array behind the scenes.\n//\n// collection.filter(function(model) { return model.get('age') > 10 });\n// collection.each(this.addView);\n//\n// `Function#apply` can be slow so we use the method's arg count, if we know it.\nvar addMethod = function(base, length, method, attribute) {\n  switch (length) {\n    case 1: return function() {\n      return base[method](this[attribute]);\n    };\n    case 2: return function(value) {\n      return base[method](this[attribute], value);\n    };\n    case 3: return function(iteratee, context) {\n      return base[method](this[attribute], cb(iteratee, this), context);\n    };\n    case 4: return function(iteratee, defaultVal, context) {\n      return base[method](this[attribute], cb(iteratee, this), defaultVal, context);\n    };\n    default: return function() {\n      var args = Array.prototype.slice.call(arguments);\n      args.unshift(this[attribute]);\n      return base[method].apply(base, args);\n    };\n  }\n};\n\nvar addUnderscoreMethods = function(Class, base, methods, attribute) {\n  _.each(methods, function(length, method) {\n    if (base[method]) Class.prototype[method] = addMethod(base, length, method, attribute);\n  });\n};\n\n// Support `collection.sortBy('attr')` and `collection.findWhere({id: 1})`.\nvar cb = function(iteratee, instance) {\n  if (_.isFunction(iteratee)) return iteratee;\n  if (_.isObject(iteratee) && !instance._isModel(iteratee)) return modelMatcher(iteratee);\n  if (_.isString(iteratee)) return function(model) { return model.get(iteratee); };\n  return iteratee;\n};\nvar modelMatcher = function(attrs) {\n  var matcher = _.matches(attrs);\n  return function(model) {\n    return matcher(model.attributes);\n  };\n};\n\n// Underscore methods that we want to implement on the Collection.\n// 90% of the core usefulness of Backbone Collections is actually implemented\n// right here:\nvar collectionMethods = {forEach: 3, each: 3, map: 3, collect: 3, reduce: 0,\n  foldl: 0, inject: 0, reduceRight: 0, foldr: 0, find: 3, detect: 3, filter: 3,\n  select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 3, includes: 3,\n  contains: 3, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,\n  head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,\n  without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,\n  isEmpty: 1, chain: 1, sample: 3, partition: 3, groupBy: 3, countBy: 3,\n  sortBy: 3, indexBy: 3, findIndex: 3, findLastIndex: 3};\n\n\n// Underscore methods that we want to implement on the Model, mapped to the\n// number of arguments they take.\nvar modelMethods = {keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,\n  omit: 0, chain: 1, isEmpty: 1};\n\n// Mix in each Underscore method as a proxy to `Collection#models`.\n\n_.each([\n  [Collection, collectionMethods, 'models'],\n  [Model, modelMethods, 'attributes']\n], function(config) {\n  var Base = config[0],\n      methods = config[1],\n      attribute = config[2];\n\n  Base.mixin = function(obj) {\n    var mappings = _.reduce(_.functions(obj), function(memo, name) {\n      memo[name] = 0;\n      return memo;\n    }, {});\n    addUnderscoreMethods(Base, obj, mappings, attribute);\n  };\n\n  addUnderscoreMethods(Base, _, methods, attribute);\n});\n\nBackbone.Model = Model;\nBackbone.View = View;\nBackbone.Collection = Collection;\nBackbone.Router = Router;\n\nBackbone.sync = sync;\nBackbone.ajax = ajax;\n\nBackbone.History = History;\n// Create the default Backbone.history.\nBackbone.history = new History;\n\nexport default Backbone;\n"]}